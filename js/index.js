// Generated by CoffeeScript 2.3.1
var getTd, init, reset;

$().ready(function() {
  $('#num_x, #num_y').on('change', reset);
  return init();
});

init = function() {
  var index, j;
  $('#num_x, #num_y').html('');
  for (index = j = 3; j <= 8; index = ++j) {
    $('#num_x, #num_y').append($('<option>').attr('value', index).html(index));
  }
  $('#num_x, #num_y').val(3);
  return reset();
};

reset = function() {
  var index, j, l, ref, ref1, tr, x, xIndex, y, yIndex;
  x = Number($('#num_x').val());
  y = Number($('#num_y').val());
  $('#num_mimic, #num_money, #num_equip, #num_commodity').html('');
  $('#field tbody').html('');
  for (yIndex = j = 0, ref = y; (0 <= ref ? j < ref : j > ref); yIndex = 0 <= ref ? ++j : --j) {
    tr = $('<tr>');
    for (xIndex = l = 0, ref1 = x; (0 <= ref1 ? l < ref1 : l > ref1); xIndex = 0 <= ref1 ? ++l : --l) {
      index = yIndex * x + xIndex;
      tr.append(getTd(index));
      $('#num_mimic, #num_money, #num_equip, #num_commodity').append($('<option>').html(index).attr('value', index));
    }
    $('#field tbody').append(tr);
  }
  $('#field tbody').find('.selectpicker').selectpicker({
    noneSelectedText: '',
    width: 'fit'
  });
  return $('#num_mimic, #num_money, #num_equip, #num_commodity').append($('<option>').html(x * y).attr('value', x * y));
};

getTd = function(index) {
  return $('<td>').html($('#cell_sample').html()).addClass('cell center').attr('id', index);
};

window.Utl = (function() {
  class Utl {
    //###########################################

    // 数値にカンマを入れる

    // @param Number num
    // @return String

    //###########################################
    static numFormat(num) {
      return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
    }

    //###########################################

    // min <= n <= max の整数乱数を生成

    // @param Number min
    // @param Number max
    // @return String

    //###########################################
    static rand(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    //###########################################

    // length 文字のランダムな文字列を生成

    // @param Number length
    // @return String

    //###########################################
    static genPassword(length = 4) {
      var chars, i, j, ref, res;
      chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      res = '';
      for (i = j = 0, ref = length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        res += chars.substr(this.rand(0, chars.length - 1), 1);
      }
      return res;
    }

    //###########################################

    // アドレスバーを変更

    // @param String url
    // @return String

    //###########################################
    static adrBar(url) {
      return window.history.replaceState('', '', '' + url);
    }

    //###########################################

    // getクエリを取得

    // @return Object

    //###########################################
    static getQuery(key = null, defaultValue = null) {
      var j, k, len, p, params, query, res, v;
      query = document.location.search.substring(1);
      params = query.split('&');
      res = {};
      for (j = 0, len = params.length; j < len; j++) {
        p = params[j];
        [k, v] = p.split('=');
        res[k] = v;
      }
      if (key === null) {
        return res;
      }
      if (res[key] != null) {
        return res[key];
      }
      return defaultValue;
    }

    //###########################################

    // 数値を min <= num < max の範囲で正規化する

    // @param Number num
    // @param Number min
    // @param Number max
    // @return String

    //###########################################
    static normalize(num, min = 0, max = 1) {
      var range;
      range = Math.abs(max - min);
      if (num < min) {
        num += range * Math.ceil(Math.abs(num - min) / range);
      } else if (max <= num) {
        num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
      }
      return num;
    }

    //###########################################

    // 現在秒を取得

    // @return int

    //###########################################
    static time(date = null) {
      if (date === null) {
        date = new Date();
      }
      return Math.floor(+date / 1000);
    }

    //###########################################

    // 現在ミリ秒を取得

    // @return int/float

    //###########################################
    static militime(date = null, getAsFloat = false) {
      if (date === null) {
        date = new Date();
      }
      return +date / (getAsFloat ? 1000 : 1);
    }

    //###########################################

    // 現在日を YYYY-MM-DD で取得

    // @param Date date
    // @param String dateSep 日付のセパレータ
    // @return String

    //###########################################
    static dateStr(date = null, dateSep = '-') {
      if (date === null) {
        date = new Date();
      }
      return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
    }

    //###########################################

    // 現在日時を YYYY-MM-DD HH:ii:ssで取得

    // @param Date date
    // @param String dateSep 日付のセパレータ
    // @param String timeSep 時間のセパレータ
    // @param boolean betweenSep 日付と時間の間の文字
    // @return String

    //###########################################
    static datetimeStr(date = null, dateSep = '-', timeSep = ':', betweenSep = ' ') {
      if (date === null) {
        date = new Date();
      }
      return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
    }

    //###########################################

    // baseDate と targetDate の時刻の差を「何分前」のような表記で取得

    // @param Date targetDate 対象となる日時
    // @param Date baseDate 基準となる日時
    // @param unsigned_int nowSec ついさっき表記する上限の秒数
    // @param String agoStr ついさっき表記の文字列
    // @param String secStr 秒の表記
    // @param String minStr 分の表記
    // @param String hourStr 時間の表記
    // @param String dayStr 日の表記
    // @param String monStr 月の表記
    // @param String yearStr 年の表記
    // @return String

    //###########################################
    static difftime(targetDate, baseDate = null, nowSec = 0, nowStr = 'ついさっき', agoStr = '前', secStr = '秒', minStr = '分', hourStr = '時間', dayStr = '日', monStr = '月', yearStr = '年') {
      var baseTime, d, diffTime, h, m, mo, targetTime, y;
      if (baseDate === null) {
        baseTime = this.time();
      }
      targetTime = this.time(targetDate);
      diffTime = baseTime - targetTime;
      if (diffTime < 0) {
        // 未来
        return null;
      }
      if (nowSec >= diffTime) {
        // ついさっきと表示する基準の秒数
        return nowStr;
      }
      // 一年以上
      y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
      if (y > 0) {
        return '' + y + yearStr + agoStr;
      }
      diffTime -= y * (60 * 60 * 24 * 30 * 12);
      // 一ヶ月以上
      mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
      if (mo > 0) {
        return '' + mo + monStr + agoStr;
      }
      diffTime -= mo * (60 * 60 * 24 * 30);
      // 一日以上
      d = Math.floor(diffTime / (60 * 60 * 24));
      if (d > 0) {
        return '' + d + dayStr + agoStr;
      }
      diffTime -= d * (60 * 60 * 24);
      // 一時間以上
      h = Math.floor(diffTime / (60 * 60));
      if (h > 0) {
        return '' + h + hourStr + agoStr;
      }
      diffTime -= h * (60 * 60);
      // 一分以上
      m = Math.floor(diffTime / 60);
      if (m > 0) {
        return '' + m + minStr + agoStr;
      }
      diffTime -= m * 60;
      if (diffTime > 0) {
        // 一秒以上
        return '' + diffTime + secStr + agoStr;
      }
      // ついさっき
      return nowStr;
    }

    //###########################################

    // 数値をゼロ埋めする

    // @param int num
    // @param int digit 桁数
    // @return int

    //###########################################
    static zerofill(num, digit) {
      return ('' + this.repeat('0', digit) + num).slice(-digit);
    }

    //###########################################

    // str を times 回繰り返した文字列を返す

    // @param String str
    // @param int times
    // @return String

    //###########################################
    static repeat(str, times) {
      return Array(1 + times).join(str);
    }

    //###########################################

    // 配列をシャッフル

    // @param Array ary シャッフルする配列
    // @return Array

    //###########################################
    static shuffle(ary) {
      var i, n;
      n = ary.length;
      while (n) {
        n--;
        i = this.rand(0, n);
        [ary[i], ary[n]] = [ary[n], ary[i]];
      }
      return ary;
    }

    //###########################################

    // 配列 ary に needle が存在するかを調べる

    // @param mixed needle 値
    // @param Array ary
    // @return boolean 存在する場合はtrue, そうでないなら false

    //###########################################
    static inArray(needle, ary) {
      var j, len, v;
      for (j = 0, len = ary.length; j < len; j++) {
        v = ary[j];
        if (v === needle) {
          return true;
        }
      }
      return false;
    }

    //###########################################

    // 配列のコピーを返す

    // @param Array ary
    // @return Array

    //###########################################
    static clone(obj) {
      var res;
      res = obj;
      if ($.isArray(obj)) {
        res = $.extend(true, [], obj);
      } else if (obj instanceof Object) {
        res = $.extend(true, {}, obj);
      }
      return res;
    }

    //###########################################

    // 長さ length の配列を val で満たして返す

    // @param int length
    // @param mixed val
    // @return Array

    //###########################################
    static arrayFill(length, val = null) {
      var i, j, ref, res;
      res = [];
      for (i = j = 0, ref = length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        res[i] = this.clone(val);
      }
      return res;
    }

    //###########################################

    // x * y の配列を val で満たして返す

    // @param int x
    // @param int y 省略時は x と同じ長さ
    // @param mixed val
    // @return Array

    //###########################################
    static array2dFill(x, y = null, val = null) {
      var j, l, ref, ref1, res, xx, yAry, yy;
      if (y === null) {
        y = x;
      }
      res = [];
      yAry = [];
      for (yy = j = 0, ref = y; (0 <= ref ? j < ref : j > ref); yy = 0 <= ref ? ++j : --j) {
        yAry[yy] = this.clone(val);
      }
      for (xx = l = 0, ref1 = x; (0 <= ref1 ? l < ref1 : l > ref1); xx = 0 <= ref1 ? ++l : --l) {
        res[xx] = this.clone(yAry);
      }
      return res;
    }

    //###########################################

    // 配列の合計を返す

    // @param Array ary
    // @return Array

    //###########################################
    static arraySum(ary) {
      var j, len, sum, v;
      sum = 0;
      for (j = 0, len = ary.length; j < len; j++) {
        v = ary[j];
        sum += v;
      }
      return sum;
    }

    //###########################################

    // 配列の最小値を返す

    // @param Array ary
    // @return Array

    //###########################################
    static arrayMin(ary) {
      var j, len, min, v;
      min = null;
      for (j = 0, len = ary.length; j < len; j++) {
        v = ary[j];
        if (min === null || min > v) {
          min = v;
        }
      }
      return min;
    }

    //###########################################

    // 配列の最大値を返す

    // @param Array ary
    // @return Array

    //###########################################
    static arrayMax(ary) {
      var j, len, max, v;
      max = null;
      for (j = 0, len = ary.length; j < len; j++) {
        v = ary[j];
        if (max === null || max < v) {
          max = v;
        }
      }
      return max;
    }

    //###########################################

    // 連想配列のキーの数を返す

    // @param Object object
    // @return int

    //###########################################
    static count(object) {
      return Object.keys(object).length;
    }

    //###########################################

    // uuid を生成（バージョン4）

    // @return String

    //###########################################
    static uuid4() {
      var i, j, random, uuid;
      uuid = '';
      for (i = j = 0; j < 32; i = ++j) {
        random = Math.random() * 16 | 0;
        if (i === 8 || i === 12 || i === 16 || i === 20) {
          uuid += '-';
        }
        uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
      }
      return uuid;
    }

    //###########################################

    // ローカルストレージの値を削除

    // @param String key
    // @param mixed value
    // @return undefined

    //###########################################
    static delLs(key) {
      return localStorage.removeItem(key);
    }

    //###########################################

    // ローカルストレージに値を設定

    // @param String key
    // @param mixed value
    // @return undefined

    //###########################################
    static setLs(key, value = null) {
      var json;
      if (value === null) {
        // null は削除
        return this.delLs(key);
      }
      json = JSON.stringify(value);
      return localStorage.setItem(key, json);
    }

    //###########################################

    // ローカルストレージから値を取得

    // @param String key
    // @return undefined

    //###########################################
    static getLs(key) {
      var res;
      res = localStorage.getItem(key);
      try {
        res = JSON.parse(res);
      } catch (error) {
        res = null;
      }
      return res;
    }

    //###########################################

    // ミリ秒待つ（要async/await対応ブラウザ＆coffee2.x）

    // @param String key
    // @return undefined

    //###########################################
    static sleep(msec) {
      return new Promise((resolve, reject) => {
        return setTimeout(() => {
          return resolve();
        }, msec);
      });
    }

  };

  //###########################################

  // key-valueとしてIndexedDBを簡単に使うクラス

  //###########################################
  Utl.IndexedDB = (function() {
    class IndexedDB {
      constructor(dbName = 'default', dbVersion = 1) {
        var open;
        this.dbName = dbName;
        this.dbVersion = dbVersion;
        open = window.indexedDB.open(this.dbName, this.dbVersion);
        open.onupgradeneeded = (evt) => {
          var res;
          res = evt.target.result;
          return res.createObjectStore(this.STORE_NAME, {
            keyPath: 'kvstore_key'
          });
        };
        open.onsuccess = (evt) => {
          return this.db = evt.target.result;
        };
      }

      // awaitで使う
      async set(key, value) {
        var request, store, token, transaction;
        await this.waitUnLock();
        token = this.genToken();
        this.lock(token);
        transaction = this.db.transaction(this.STORE_NAME, 'readwrite');
        store = transaction.objectStore(this.STORE_NAME);
        request = store.put({
          kvstore_key: key,
          kvstore_value: JSON.stringify(value)
        });
        request.onsuccess = (evt) => {
          if (token === this.token) {
            return this.capture(true, token);
          } else {
            return this.capture(false, token);
          }
        };
        request.onerror = (evt) => {
          return this.capture(false, token);
        };
        await this.waitCapture();
        if (token === this.token && this.isCaptured) {
          return this.unlock(token);
        } else {
          return false;
        }
      }

      // awaitで使う
      async get(key) {
        var request, store, token, transaction;
        await this.waitUnLock();
        token = this.genToken();
        this.lock(token);
        transaction = this.db.transaction(this.STORE_NAME, 'readonly');
        store = transaction.objectStore(this.STORE_NAME);
        request = store.get(key);
        request.onsuccess = (evt) => {
          var res;
          try {
            res = JSON.parse(evt.target.result.kvstore_value);
          } catch (error) {
            res = null;
          }
          if (token === this.token) {
            return this.capture(res, token);
          } else {
            return this.unlock(token);
          }
        };
        await this.waitCapture();
        if (this.isCaptured) {
          return this.unlock(token);
        } else {
          return null;
        }
      }

      // awaitで使う
      async gets(keys) {
        var j, key, len, request, res, store, token, transaction;
        await this.waitUnLock();
        token = this.genToken();
        this.lock(token);
        res = {};
        transaction = this.db.transaction(this.STORE_NAME, 'readonly');
        store = transaction.objectStore(this.STORE_NAME);
        for (j = 0, len = keys.length; j < len; j++) {
          key = keys[j];
          request = store.get(key);
          request.onsuccess = (evt) => {
            try {
              return res[evt.target.result.kvstore_key] = JSON.parse(evt.target.result.kvstore_value);
            } catch (error) {
              return res[evt.target.result.kvstore_key] = null;
            }
          };
        }
        transaction.oncomplete = (evt) => {
          return this.capture(res, token);
        };
        await this.waitCapture();
        if (this.isCaptured) {
          return this.unlock(token);
        } else {
          return null;
        }
      }

      // awaitで呼ぶ
      async getAllKeys() {
        var keys, request, store, token, transaction;
        await this.waitUnLock();
        token = this.genToken();
        this.lock(token);
        keys = [];
        transaction = this.db.transaction(this.STORE_NAME, 'readonly');
        store = transaction.objectStore(this.STORE_NAME);
        request = store.openCursor();
        request.onsuccess = (evt) => {
          var cursor;
          cursor = evt.target.result;
          if (cursor) {
            keys.push(cursor.key);
            return cursor.continue();
          } else {
            return this.capture(keys, token);
          }
        };
        request.onerror = (evt) => {
          return this.unlock(token);
        };
        await this.waitCapture();
        if (this.isCaptured) {
          return this.unlock(token);
        } else {
          return [];
        }
      }

      destroy() {
        return window.indexedDB.deleteDatabase(this.dbName);
      }

      unlock(token = null) {
        var res;
        if (token === null || token === this.token) {
          res = this.result;
          this.result = null;
          this.isCaptured = false;
          this.locked = null;
          this.token = null;
          this.isLocked = false;
          return res;
        } else {
          return null;
        }
      }

      capture(value, token) {
        if (this.token === token) {
          this.isLocked = true;
          this.isCaptured = true;
          return this.result = value;
        }
      }

      lock(token) {
        this.isLocked = true;
        this.token = token;
        this.isCaptured = false;
        this.locked = +(new Date());
        this.result = null;
        return true;
      }

      async waitUnLock() {
        while (this.isLocked && +(new Date()) - this.locked < this.TIMEOUT_MSEC) {
          await Utl.sleep(this.LOCK_WAIT_MSEC);
        }
        return true;
      }

      async waitCapture() {
        while (!this.isCaptured && +(new Date()) - this.locked < this.TIMEOUT_MSEC) {
          await Utl.sleep(this.LOCK_WAIT_MSEC);
        }
        return true;
      }

      async waitInitialized() {
        while (this.isInitialized && +(new Date()) - this.locked < this.TIMEOUT_MSEC) {
          await Utl.sleep(this.LOCK_WAIT_MSEC);
        }
        return true;
      }

      genToken() {
        return '' + (+new Date()) + Utl.genPassword(128);
      }

    };

    // テーブル名
    IndexedDB.prototype.STORE_NAME = 'default';

    // ロック待ちミリ秒（1回あたり）
    IndexedDB.prototype.LOCK_WAIT_MSEC = 50;

    // タイムアウトにするミリ秒
    IndexedDB.prototype.TIMEOUT_MSEC = 5000;

    return IndexedDB;

  }).call(this);

  return Utl;

}).call(this);
